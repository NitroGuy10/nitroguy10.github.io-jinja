<!DOCTYPE html>
<html lang="en">
<!-- Ah, you're looking at the source code aren't ya? Well, enjoy your stay! -->

<!-- GENERATED FROM about_website.html.jinja -->

<head>
    <title>NitroGuy</title>

    <meta name="description" content="How NitroGuy's website was made">
    {{ site.head }}
</head>

<body id="article">
    <h1>NitroGuy</h1>

    <div id="content">
        <h2 id="article-title">How This Website Was Made, A Story</h2>
        <hr>
        <br>
        <p>
            This website has a lot of moving parts. Ok, actually it has no moving parts. It's <strong>static</strong>.
            Every page you load on this website is its own unchanging HTML file. There's also hardly any
            JavaScript&mdash;in fact there isn't ANY JavaScript on <em>this</em> particular page.</p>
        <p>
            If you know about designing websites from scratch and what kinds of methods go with what kind of website,
            then this probably isn't surprising to you.
            Static websites are typically associated with things like blogs and my website <em>could</em> sort of be
            considered one convoluted blog.
            None of my site really needs to be dynamic; I mean I'm not exactly trying to make nitroguy10.github.io the
            new Facebook.
            Plus, I'm using GitHub Pages to host this (at least at the moment) and I don't even think I CAN host a
            non-static site at all.
        </p>
        <p>
            <img src="images/website_terminal.png" alt="I use a Python script to generate my website"
                style="width: 70%;">
        </p>
        <p>
            What may NOT be as obvious is that this website is <strong>generated</strong>.
            You see, the "music" portion of my website functions as an encyclopedia of all the songs I've made.
            This created some unique challenges for me&mdash;things that were totally uncharted territory at the time of
            me
            creating the "music" section.
        </p>
        <ol class="normal-list">
            <li>Each song and collection had its own set of information.</li>
            <li>That information needed to be displayed <em>identically</em> across multiple pages in DIFFERENT
                contexts.</li>
            <li>Each page needed look the same. What if I decided to update the layout later on?</li>
            <li>It needed to be FUTURE-PROOF. What if I made a new song or collection?</li>
        </ol>
        <img src="images/old_script.png" alt="My old solution to this involved lots of rather silly JavaScript"
            style="width: 100%;">
        <p>
            My old way of dealing with this was a mess. I essentially had HTML files containing a big script that
            created each
            element of the page and filled it with the info corresponding to the given song or collection.
            My solution for SONG pages (or what I called "links_to" pages) was even wonkier. I used the HASH to
            determine what info to put on the screen. Now, this isn't even <em>that</em> bad ...ok it's pretty bad, but
            there were a few other things that just pushed it over the line of ridiculous. For one, I had to make a
            SEPARATE HTML file for each collection even though the contents would be exactly the same (script,
            remember?) just so the URLs would exist for GitHub Pages. That's already starting to go against #3 on that
            list I just made because I'd have to remember to update ALL those HTML files if I decided to change the
            layout. Even more silly is that the JSON file the pages were pulling the song data from... wasn't a
            JSON file. Past me couldn't figure out how the heck to get my scripts to read JSON so instead I opted to
            DECLARE A 2X2 ARRAY OF OBJECTS, INDEX BY INDEX, IN A JAVASCRIPT FILE........ Yeah, I'm glad I decided to
            change <a
                href="{{ site.nitroguy.socials.github.link }}/nitroguy10.github.io/blob/a64279dd4eacce431d23bb2f548447b3d73da22d/js/song_data.js">all
                that.</a>
        </p>
        <img src="images/song_data_json.png" alt="All of my song data is kept in a JSON file" style="width: 50%;">
        <p>
            Oh yeah, all of the data for my songs is stored in a single JSON file (at least NOW it is *shudders*).
            I'm really happy to be doing this as it not only serves as the central database from which my webpages
            gather their info, but it also serves as a formal record of my songs and the information about them.
            Otherwise I may not remember the release date of certain songs for example, and maybe far in the future I
            would forget even making some of these songs without seeing them in the JSON file.
        </p>
        <p>
            If you haven't already guessed from my tone by now, I wasn't really happy with the internal design of my
            website and I expressed this to my programmer friend.
            He suggested I use a "static site generator"&mdash;something I had never heard of.
            After playing around with a couple (one) of them, I realized they generally weren't made to generate
            webpages from data files, which was what I needed. So, I decided to create my own static site generator
            called <a href="{{ site.nitroguy.socials.github.link }}/tuscon">tuscon</a>. After ten-or-so days and finally
            using
            recursion for something after like 2 years, it was done. And then- wait. Is tuscon a "static site generator"
            or a "templating" library.
            Wait a minute, is TEMPLATING what I was looking for???
        </p>
        <p>
            . . . . . . . . . . . Templating was what I was looking for.
        </p>
        <p>
            Holy cow can your life be such a pain when you don't know the right search term for something. I digress.
            Now knowing that a t-t-TEMPLATING was what I needed, I got to work making templates for use with <a href="https://jinja.palletsprojects.com/">Jinja</a>.
        </p>
        <img src="images/sass_mixins.png" alt="I use mixins in Sass to make managing media queries easier and cleaner"
            style="width: 40%;">
        <p>
            I don't think I'm necessarily using Sass for its <em>intended, intended</em> purpose nor I think I really
            NEED to use it but I am anyway.
            Sass is certainly nicer syntactically than CSS and it's got a bunch of features that I'm not using.
            The "@include" thing that the above picture shows is ABSOLUTELY not the intended use for mixins but the way
            I use them has actually helped make managing the media queries for the stylesheet much easier.
            I don't really have much else to say on the stylesheet front except that CSS is annoying and very useful and
            media queries are annoying and very useful.
        </p>
        <p></p>
    </div>

    <footer>
        <a class="main-site" href="../index.html#music">Main Site</a>
    </footer>

    {{ site.footer }}
</body>

</html>